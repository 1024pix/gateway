'use strict';

const Hapi = require('@hapi/hapi');
const packageJSON = require('../package.json');
const serverPort = process.env.PORT || 3000;

const init = async () => {

    const server = createServer(serverPort);
    healthCheckRoute(server);
    certificationsRoute(server);

    await server.start();
    console.log('Server running on %s', server.info.uri);
};

process.on('unhandledRejection', exitOnError);


init();


function createServer(port) {
  return Hapi.server({
    port,
  });
}

function certificationsRoute(server) {
  server.route({
    method: 'GET',
    path: '/v1/certifications/organisation/{uai}',
    handler: (request, h) => {
      if('1234567A' === request.params.uai){
        const certifications = require('../lib/certifications.json')
        return certifications;
      } else {
        return h.response(notFoundError()).code(404)
      }
    }
  })
}
  


function healthCheckRoute(server) {
  server.route({
    method: 'GET',
    path: '/v1',
    config: {
      auth: false,
      handler: () => {
        return {
          'name': packageJSON.name,
          'version': packageJSON.version,
          'description': packageJSON.description,
          'environment': process.env.environment,
          'container-version': process.env.CONTAINER_VERSION,
          'container-app-name': process.env.APP,
        };
      },
      tags: ['v1, healthcheck'],
    },
  });
}

function notFoundError(){
  return {
    "errors": [
      {
        "status": "404",
        "title": "Ressource not found",
        "detail": "L'organisation pour le code UAI demand√©e n'existe pas."
      }
    ]
  }
}

function exitOnError(err){
  console.error(err);
  process.exit(1);
}
